#!/usr/bin/env python3
"""
Ministerial AI - Launcher Script
Script de lanzamiento simple para la aplicaci√≥n Ministerial AI
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

def check_requirements():
    """Verificar que los archivos necesarios est√©n presentes"""
    required_files = ['index.html', 'styles.css', 'script.js', 'server.py']
    missing_files = []
    
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Archivos faltantes: {', '.join(missing_files)}")
        print("üí° Aseg√∫rate de que todos los archivos de la aplicaci√≥n est√©n presentes.")
        return False
    
    return True

def start_server():
    """Iniciar el servidor de desarrollo"""
    print("üïäÔ∏è  Iniciando Ministerial AI...")
    print("üìÅ Verificando archivos...")
    
    if not check_requirements():
        sys.exit(1)
    
    print("‚úÖ Archivos verificados correctamente")
    print("üöÄ Iniciando servidor...")
    
    try:
        # Intentar abrir el navegador despu√©s de un breve delay
        def open_browser():
            time.sleep(2)
            webbrowser.open('http://localhost:3000')
        
        import threading
        browser_thread = threading.Thread(target=open_browser)
        browser_thread.daemon = True
        browser_thread.start()
        
        # Iniciar el servidor
        result = subprocess.run([sys.executable, 'server.py'], check=True)
        
    except KeyboardInterrupt:
        print("\nüõë Aplicaci√≥n cerrada por el usuario")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al iniciar el servidor: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

def show_help():
    """Mostrar ayuda"""
    help_text = """
üïäÔ∏è  Ministerial AI - Launcher

USO:
    python3 launcher.py [opciones]

OPCIONES:
    --help, -h     Mostrar esta ayuda
    --start, -s    Iniciar la aplicaci√≥n (por defecto)
    --check        Verificar archivos solamente
    --info         Mostrar informaci√≥n del proyecto

EJEMPLOS:
    python3 launcher.py          # Iniciar aplicaci√≥n
    python3 launcher.py --check  # Verificar archivos
    python3 launcher.py --info   # Mostrar informaci√≥n

DESARROLLO:
    ‚Ä¢ Abre http://localhost:3000 en tu navegador
    ‚Ä¢ La aplicaci√≥n se actualiza autom√°ticamente al guardar archivos
    ‚Ä¢ Presiona Ctrl+C para detener el servidor

SOPORTE:
    ‚Ä¢ Revisa README.md para documentaci√≥n completa
    ‚Ä¢ Revisa DEPLOYMENT.md para opciones de despliegue
    ‚Ä¢ Usa las herramientas de desarrollador del navegador para depurar
    """
    print(help_text)

def show_info():
    """Mostrar informaci√≥n del proyecto"""
    info_text = """
üïäÔ∏è  Ministerial AI - Informaci√≥n del Proyecto

DESCRIPCI√ìN:
    Aplicaci√≥n web de asistente AI para el ministerio del Rev. Frankie Felicie
    
CARACTER√çSTICAS:
    ‚úÖ Asistente AI b√≠blico inteligente
    ‚úÖ Base de datos de vers√≠culos RVR1960
    ‚úÖ Informaci√≥n completa del ministerio
    ‚úÖ Soporte biling√ºe (Espa√±ol/Ingl√©s)
    ‚úÖ Dise√±o responsivo y accesible
    ‚úÖ Sin dependencias externas
    ‚úÖ Implementaci√≥n pura HTML/CSS/JS

TECNOLOG√çAS:
    ‚Ä¢ HTML5 con sem√°ntica moderna
    ‚Ä¢ CSS3 con variables personalizadas
    ‚Ä¢ JavaScript ES6+ vanilla
    ‚Ä¢ Python 3.6+ para servidor de desarrollo
    ‚Ä¢ Google Fonts para tipograf√≠a

ARCHIVOS PRINCIPALES:
    ‚Ä¢ index.html - Aplicaci√≥n principal
    ‚Ä¢ styles.css - Estilos de la aplicaci√≥n
    ‚Ä¢ script.js - L√≥gica del agente AI
    ‚Ä¢ server.py - Servidor de desarrollo
    ‚Ä¢ README.md - Documentaci√≥n
    ‚Ä¢ DEPLOYMENT.md - Gu√≠a de despliegue

MINISTERIO:
    ‚Ä¢ Nombre: Frankie Felicie Ministries
    ‚Ä¢ Iglesia: Iglesia de Dios Pentecostal Luz en Medio de las Tinieblas Inc.
    ‚Ä¢ Ubicaci√≥n: Lake Station, Indiana, USA
    ‚Ä¢ Web: https://frankiefelicie.net

DESARROLLO:
    ‚Ä¢ Puerto por defecto: 3000
    ‚Ä¢ Auto-recarga: S√≠
    ‚Ä¢ Debugging: Browser DevTools
    ‚Ä¢ Testing: Multi-navegador recomendado

CONTRIBUCI√ìN:
    Este proyecto est√° dise√±ado espec√≠ficamente para Frankie Felicie Ministries.
    Para modificaciones, contactar al equipo de desarrollo del ministerio.
    """
    print(info_text)

def main():
    """Funci√≥n principal"""
    if len(sys.argv) > 1:
        option = sys.argv[1].lower()
        
        if option in ['--help', '-h']:
            show_help()
            return
        elif option in ['--check']:
            if check_requirements():
                print("‚úÖ Todos los archivos requeridos est√°n presentes")
            else:
                print("‚ùå Faltan archivos requeridos")
            return
        elif option in ['--info']:
            show_info()
            return
        elif option in ['--start', '-s']:
            start_server()
            return
        else:
            print(f"‚ùå Opci√≥n desconocida: {option}")
            print("üí° Usa --help para ver las opciones disponibles")
            return
    
    # Por defecto, iniciar la aplicaci√≥n
    start_server()

if __name__ == "__main__":
    main()